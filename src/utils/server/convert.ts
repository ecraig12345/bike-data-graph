import { transform } from 'csv';
import type { Transformer } from 'stream-transform';
import { CsvInputOptions, readCsv } from './readCsv';
import { streamToArray } from './streamToArray';
import { ReadFileData } from '../types';
import { convertRecord, ConvertState } from './convertRecord';

export type ConvertOutputOptionsSteam = { type: 'stream' };
export type ConvertOutputOptionsArray = { type: 'array'; sortByField?: string };

/**
 * Convert CSV data from the records_data format generated by the FIT SDK's conversion tool
 * and return the records.
 * @param inputOptions If `inputOptions.type` is `file`, read from the file path and parse/convert.
 * If it's `string`, just parse/convert the given data.
 * @param outputOptions If `outputOptions.type` is `stream`, return a stream of record objects.
 * If it's `array`, return an array of record objects.
 */
export function convert(
  inputOptions: CsvInputOptions,
  outputOptions: ConvertOutputOptionsArray
): Promise<ReadFileData[]>;
export function convert(
  inputOptions: CsvInputOptions,
  outputOptions: ConvertOutputOptionsSteam
): Transformer;
export function convert(
  inputOptions: CsvInputOptions,
  outputOptions: ConvertOutputOptionsArray | ConvertOutputOptionsSteam
) {
  const state = new ConvertState();
  const stream = readCsv(inputOptions, { type: 'stream' }).pipe(
    transform((record: any) => convertRecord(record, state))
  );

  return outputOptions.type === 'stream'
    ? stream
    : streamToArray(stream, outputOptions.sortByField);
}
